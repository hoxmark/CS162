{ val intEqual = (x: Int) => (y: Int) => x <= y && y <= x
  val addMap = (map: Int => Option[Int]) => (key: Int) => (value: Int) => (x: Int) => if (intEqual(key)(x)) Some[Int](value) else map(key)
  val addMapPair = (map: Int => Option[Int]) => (pair: (Int, Int)) => addMap(map)(pair._1)(pair._2)
  val emptyMap = (x: Int) => None[Int](unit)
  val pairList = Cons[(Int, Int)](((1, 2), Cons[(Int, Int)](((1, 3), Nil[(Int, Int)](unit)))))
  val wholeMap = foldLeft[(Int, Int), Int => Option[Int]](pairList)(emptyMap)(addMapPair)
  wholeMap(1)
}
;;;
Some(3)
;;;
Option[Int]
